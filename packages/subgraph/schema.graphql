

type Channel @entity {
    "The channel address"
    id: ID!

    "The channel token URI"

    uri: String!

    "The channel name"

    name: String!

    "The channel default admin address"
    
    admin: User!

    "The channel managers"

    managers: [User!]!

    "The channel transport configuration"

    transportLayer: TransportLayer!

    "The channel fee configuration"

    fees: FeeConfig

    "The channel creator logic configuration"

    creatorLogic: LogicConfig

    "The channel minter logic configuration"

    minterLogic: LogicConfig

    "The channel tokens"

    tokens: [Token!]! @derivedFrom(field: "channel")

    "The channel mints"

    mints: [Mint!]! @derivedFrom(field: "channel")

    "The channel reward transfer events"

    rewardTransferEvents: [RewardTransferEvent!]! @derivedFrom(field: "channel")

    blockNumber: BigInt!
    blockTimestamp: BigInt!

}

type ApprovedDynamicLogicSignature @entity {
    "Concatenation of tx hash + log index"
    id: ID!
    signature: Bytes!
    calldataAddressOffset: BigInt!

    blockNumber: BigInt!
    blockTimestamp: BigInt!
}

type TransportLayer @entity {
    id: ID!
    type: String!
    finiteTransportConfig: FiniteTransportConfig
    infiniteTransportConfig: InfiniteTransportConfig

    blockNumber: BigInt!
    blockTimestamp: BigInt!
}

type FiniteTransportConfig @entity {
    id: ID!
    createStart: BigInt!
    mintStart: BigInt!
    mintEnd: BigInt!
    ranks: [BigInt!]!
    allocations: [BigInt!]!
    totalAllocation: BigInt!
    token: Bytes!

    settled: Boolean!
    settledBy: Bytes!
    settledAt: BigInt!
}

type InfiniteTransportConfig @entity {
  id: ID!
  saleDuration: BigInt!
}

type FeeConfig @entity {
    "The channel address"
    id: ID!
    updatedBy: Bytes!
    "The fee contract address"
    feeContract: Bytes!
    type: String!
    "The custom fee configuration"
    customFees: CustomFees

    blockNumber: BigInt!
    blockTimestamp: BigInt!
}

type CustomFees @entity {
    "The channel address"
    id: ID!
    
    "The channel fee configuration"
    channelTreasury: Bytes!
    uplinkBps: BigInt!
    channelBps: BigInt!
    creatorBps: BigInt!
    mintReferralBps: BigInt!
    sponsorBps: BigInt!
    ethMintPrice: BigInt!
    erc20MintPrice: BigInt!
    erc20Contract: Bytes!
}

type LogicConfig @entity {
    "The channel address + the logic type"
    id: ID!
    updatedBy: Bytes!
    "The logic contract address"
    logicContract: Bytes!
    type: String!
    dynamicLogic: DynamicLogic

    blockNumber: BigInt!
    blockTimestamp: BigInt!
}

type DynamicLogic @entity {
    "The channel address + the logic type"
    id: ID!
    targets: [Bytes!]!
    signatures: [Bytes!]!
    datas: [Bytes!]!
    operators: [BigInt!]!
    literalOperands: [Bytes!]!
    interactionPowerTypes: [BigInt!]!
    interactionPowers: [BigInt!]!
}

type User @entity {
    id: ID!
    createdTokens: [Token!]! @derivedFrom(field: "author")
    sponsoredTokens: [Token!]! @derivedFrom(field: "sponsor")
    mints: [Mint!]! @derivedFrom(field: "minter")
    mintReferrals: [Mint!]! @derivedFrom(field: "referral")
    collectedTokens: [TokenHolder!]! @derivedFrom(field: "user")

}

type TokenHolder @entity {
    "Concatenation of the user address, channel address, and token id."
    id: ID!
    user: User!
    token: Token!
    balance: BigInt!
    
}

type Token @entity {
    "Concatenation of the channel address and the token id."
    id: ID!
    tokenId: BigInt!
    author: User!
    sponsor: User!
    uri: String!
    totalMinted: BigInt!
    maxSupply: BigInt!
    holders: [TokenHolder!]! @derivedFrom(field: "token")

    "The token channel"
    channel: Channel!

    blockNumber: BigInt!
    blockTimestamp: BigInt!
}

type Mint @entity(immutable: true) {
    "Concatenation of tx hash and batch loop index"
    id: ID!
    token: Token!
    amount: BigInt!
    data: Bytes!
    minter: User!
    referral: User!

    "The token channel"
    channel: Channel!

    blockNumber: BigInt!
    blockTimestamp: BigInt!
} 

type RewardTransferEvent @entity(immutable: true) {
    "Concatenation of tx hash and log index"  
    id: ID!
    from: User!
    to: User!
    amount: BigInt!
    token: Bytes!
    channel: Channel!

    blockNumber: BigInt!
    blockTimestamp: BigInt!
}

type ChannelTokenTransferEvent @entity(immutable: true) {
    "Concatenation of tx hash and log index"  
    id: ID!
    operator: User!
    from: User!
    to: User!
    tokenId: BigInt!
    value: BigInt!

    token: Token!
    channel: Channel!

    blockNumber: BigInt!
    blockTimestamp: BigInt!
}