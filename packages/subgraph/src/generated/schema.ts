// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Channel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Channel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Channel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Channel", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Channel | null {
    return changetype<Channel | null>(store.get_in_block("Channel", id));
  }

  static load(id: string): Channel | null {
    return changetype<Channel | null>(store.get("Channel", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get managers(): Array<Bytes> {
    let value = this.get("managers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set managers(value: Array<Bytes>) {
    this.set("managers", Value.fromBytesArray(value));
  }

  get transportLayer(): string {
    let value = this.get("transportLayer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transportLayer(value: string) {
    this.set("transportLayer", Value.fromString(value));
  }
}

export class TransportLayer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransportLayer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransportLayer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TransportLayer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TransportLayer | null {
    return changetype<TransportLayer | null>(
      store.get_in_block("TransportLayer", id),
    );
  }

  static load(id: string): TransportLayer | null {
    return changetype<TransportLayer | null>(store.get("TransportLayer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get saleDuration(): BigInt | null {
    let value = this.get("saleDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set saleDuration(value: BigInt | null) {
    if (!value) {
      this.unset("saleDuration");
    } else {
      this.set("saleDuration", Value.fromBigInt(<BigInt>value));
    }
  }

  get createStart(): BigInt | null {
    let value = this.get("createStart");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createStart(value: BigInt | null) {
    if (!value) {
      this.unset("createStart");
    } else {
      this.set("createStart", Value.fromBigInt(<BigInt>value));
    }
  }

  get mintStart(): BigInt | null {
    let value = this.get("mintStart");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set mintStart(value: BigInt | null) {
    if (!value) {
      this.unset("mintStart");
    } else {
      this.set("mintStart", Value.fromBigInt(<BigInt>value));
    }
  }

  get mintEnd(): BigInt | null {
    let value = this.get("mintEnd");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set mintEnd(value: BigInt | null) {
    if (!value) {
      this.unset("mintEnd");
    } else {
      this.set("mintEnd", Value.fromBigInt(<BigInt>value));
    }
  }

  get ranks(): Array<BigInt> | null {
    let value = this.get("ranks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set ranks(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("ranks");
    } else {
      this.set("ranks", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get allocations(): Array<BigInt> | null {
    let value = this.get("allocations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set allocations(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("allocations");
    } else {
      this.set("allocations", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get totalAllocation(): BigInt | null {
    let value = this.get("totalAllocation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalAllocation(value: BigInt | null) {
    if (!value) {
      this.unset("totalAllocation");
    } else {
      this.set("totalAllocation", Value.fromBigInt(<BigInt>value));
    }
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Token | null {
    return changetype<Token | null>(store.get_in_block("Token", id));
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get saleEnd(): BigInt {
    let value = this.get("saleEnd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set saleEnd(value: BigInt) {
    this.set("saleEnd", Value.fromBigInt(value));
  }
}
