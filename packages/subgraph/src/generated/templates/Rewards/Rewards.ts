// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ERC20Transferred extends ethereum.Event {
  get params(): ERC20Transferred__Params {
    return new ERC20Transferred__Params(this);
  }
}

export class ERC20Transferred__Params {
  _event: ERC20Transferred;

  constructor(event: ERC20Transferred) {
    this._event = event;
  }

  get spender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ETHTransferred extends ethereum.Event {
  get params(): ETHTransferred__Params {
    return new ETHTransferred__Params(this);
  }
}

export class ETHTransferred__Params {
  _event: ETHTransferred;

  constructor(event: ETHTransferred) {
    this._event = event;
  }

  get spender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Rewards extends ethereum.SmartContract {
  static bind(address: Address): Rewards {
    return new Rewards("Rewards", address);
  }

  erc20Balances(param0: Address): BigInt {
    let result = super.call(
      "erc20Balances",
      "erc20Balances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_erc20Balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "erc20Balances",
      "erc20Balances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get weth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
