// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpgradePathContractInitialized extends ethereum.Event {
  get params(): UpgradePathContractInitialized__Params {
    return new UpgradePathContractInitialized__Params(this);
  }
}

export class UpgradePathContractInitialized__Params {
  _event: UpgradePathContractInitialized;

  constructor(event: UpgradePathContractInitialized) {
    this._event = event;
  }
}

export class UpgradeRegistered extends ethereum.Event {
  get params(): UpgradeRegistered__Params {
    return new UpgradeRegistered__Params(this);
  }
}

export class UpgradeRegistered__Params {
  _event: UpgradeRegistered;

  constructor(event: UpgradeRegistered) {
    this._event = event;
  }

  get baseImpl(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get upgradeImpl(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpgradeRemoved extends ethereum.Event {
  get params(): UpgradeRemoved__Params {
    return new UpgradeRemoved__Params(this);
  }
}

export class UpgradeRemoved__Params {
  _event: UpgradeRemoved;

  constructor(event: UpgradeRemoved) {
    this._event = event;
  }

  get baseImpl(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get upgradeImpl(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpgradePath extends ethereum.SmartContract {
  static bind(address: Address): UpgradePath {
    return new UpgradePath("UpgradePath", address);
  }

  codeRepository(): string {
    let result = super.call("codeRepository", "codeRepository():(string)", []);

    return result[0].toString();
  }

  try_codeRepository(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "codeRepository",
      "codeRepository():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractName(): string {
    let result = super.call("contractName", "contractName():(string)", []);

    return result[0].toString();
  }

  try_contractName(): ethereum.CallResult<string> {
    let result = super.tryCall("contractName", "contractName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractVersion(): string {
    let result = super.call(
      "contractVersion",
      "contractVersion():(string)",
      [],
    );

    return result[0].toString();
  }

  try_contractVersion(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "contractVersion",
      "contractVersion():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isAllowedUpgrade(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isAllowedUpgrade",
      "isAllowedUpgrade(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBoolean();
  }

  try_isAllowedUpgrade(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAllowedUpgrade",
      "isAllowedUpgrade(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRegisteredUpgradePath(baseImpl: Address, upgradeImpl: Address): boolean {
    let result = super.call(
      "isRegisteredUpgradePath",
      "isRegisteredUpgradePath(address,address):(bool)",
      [
        ethereum.Value.fromAddress(baseImpl),
        ethereum.Value.fromAddress(upgradeImpl),
      ],
    );

    return result[0].toBoolean();
  }

  try_isRegisteredUpgradePath(
    baseImpl: Address,
    upgradeImpl: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRegisteredUpgradePath",
      "isRegisteredUpgradePath(address,address):(bool)",
      [
        ethereum.Value.fromAddress(baseImpl),
        ethereum.Value.fromAddress(upgradeImpl),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _initOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RegisterUpgradePathCall extends ethereum.Call {
  get inputs(): RegisterUpgradePathCall__Inputs {
    return new RegisterUpgradePathCall__Inputs(this);
  }

  get outputs(): RegisterUpgradePathCall__Outputs {
    return new RegisterUpgradePathCall__Outputs(this);
  }
}

export class RegisterUpgradePathCall__Inputs {
  _call: RegisterUpgradePathCall;

  constructor(call: RegisterUpgradePathCall) {
    this._call = call;
  }

  get baseImpls(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get upgradeImpl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterUpgradePathCall__Outputs {
  _call: RegisterUpgradePathCall;

  constructor(call: RegisterUpgradePathCall) {
    this._call = call;
  }
}

export class RemoveUpgradePathCall extends ethereum.Call {
  get inputs(): RemoveUpgradePathCall__Inputs {
    return new RemoveUpgradePathCall__Inputs(this);
  }

  get outputs(): RemoveUpgradePathCall__Outputs {
    return new RemoveUpgradePathCall__Outputs(this);
  }
}

export class RemoveUpgradePathCall__Inputs {
  _call: RemoveUpgradePathCall;

  constructor(call: RemoveUpgradePathCall) {
    this._call = call;
  }

  get baseImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get upgradeImpl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveUpgradePathCall__Outputs {
  _call: RemoveUpgradePathCall;

  constructor(call: RemoveUpgradePathCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
