// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CreatorLogicSet extends ethereum.Event {
  get params(): CreatorLogicSet__Params {
    return new CreatorLogicSet__Params(this);
  }
}

export class CreatorLogicSet__Params {
  _event: CreatorLogicSet;

  constructor(event: CreatorLogicSet) {
    this._event = event;
  }

  get channel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get logic(): CreatorLogicSetLogicStruct {
    return changetype<CreatorLogicSetLogicStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class CreatorLogicSetLogicStruct extends ethereum.Tuple {
  get targets(): Array<Address> {
    return this[0].toAddressArray();
  }

  get signatures(): Array<Bytes> {
    return this[1].toBytesArray();
  }

  get datas(): Array<Bytes> {
    return this[2].toBytesArray();
  }

  get operators(): Array<i32> {
    return this[3].toI32Array();
  }

  get literalOperands(): Array<Bytes> {
    return this[4].toBytesArray();
  }

  get interactionPowerTypes(): Array<i32> {
    return this[5].toI32Array();
  }

  get interactionPowers(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}

export class MinterLogicSet extends ethereum.Event {
  get params(): MinterLogicSet__Params {
    return new MinterLogicSet__Params(this);
  }
}

export class MinterLogicSet__Params {
  _event: MinterLogicSet;

  constructor(event: MinterLogicSet) {
    this._event = event;
  }

  get channel(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get logic(): MinterLogicSetLogicStruct {
    return changetype<MinterLogicSetLogicStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class MinterLogicSetLogicStruct extends ethereum.Tuple {
  get targets(): Array<Address> {
    return this[0].toAddressArray();
  }

  get signatures(): Array<Bytes> {
    return this[1].toBytesArray();
  }

  get datas(): Array<Bytes> {
    return this[2].toBytesArray();
  }

  get operators(): Array<i32> {
    return this[3].toI32Array();
  }

  get literalOperands(): Array<Bytes> {
    return this[4].toBytesArray();
  }

  get interactionPowerTypes(): Array<i32> {
    return this[5].toI32Array();
  }

  get interactionPowers(): Array<BigInt> {
    return this[6].toBigIntArray();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SignatureApproved extends ethereum.Event {
  get params(): SignatureApproved__Params {
    return new SignatureApproved__Params(this);
  }
}

export class SignatureApproved__Params {
  _event: SignatureApproved;

  constructor(event: SignatureApproved) {
    this._event = event;
  }

  get signature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get calldataAddressPosition(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DynamicLogic extends ethereum.SmartContract {
  static bind(address: Address): DynamicLogic {
    return new DynamicLogic("DynamicLogic", address);
  }

  calculateCreatorInteractionPower(user: Address): BigInt {
    let result = super.call(
      "calculateCreatorInteractionPower",
      "calculateCreatorInteractionPower(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_calculateCreatorInteractionPower(
    user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCreatorInteractionPower",
      "calculateCreatorInteractionPower(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateMinterInteractionPower(user: Address): BigInt {
    let result = super.call(
      "calculateMinterInteractionPower",
      "calculateMinterInteractionPower(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_calculateMinterInteractionPower(
    user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateMinterInteractionPower",
      "calculateMinterInteractionPower(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  codeRepository(): string {
    let result = super.call("codeRepository", "codeRepository():(string)", []);

    return result[0].toString();
  }

  try_codeRepository(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "codeRepository",
      "codeRepository():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractName(): string {
    let result = super.call("contractName", "contractName():(string)", []);

    return result[0].toString();
  }

  try_contractName(): ethereum.CallResult<string> {
    let result = super.tryCall("contractName", "contractName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractVersion(): string {
    let result = super.call(
      "contractVersion",
      "contractVersion():(string)",
      [],
    );

    return result[0].toString();
  }

  try_contractVersion(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "contractVersion",
      "contractVersion():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _initOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveLogicCall extends ethereum.Call {
  get inputs(): ApproveLogicCall__Inputs {
    return new ApproveLogicCall__Inputs(this);
  }

  get outputs(): ApproveLogicCall__Outputs {
    return new ApproveLogicCall__Outputs(this);
  }
}

export class ApproveLogicCall__Inputs {
  _call: ApproveLogicCall;

  constructor(call: ApproveLogicCall) {
    this._call = call;
  }

  get signature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get calldataAddressPosition(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveLogicCall__Outputs {
  _call: ApproveLogicCall;

  constructor(call: ApproveLogicCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCreatorLogicCall extends ethereum.Call {
  get inputs(): SetCreatorLogicCall__Inputs {
    return new SetCreatorLogicCall__Inputs(this);
  }

  get outputs(): SetCreatorLogicCall__Outputs {
    return new SetCreatorLogicCall__Outputs(this);
  }
}

export class SetCreatorLogicCall__Inputs {
  _call: SetCreatorLogicCall;

  constructor(call: SetCreatorLogicCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetCreatorLogicCall__Outputs {
  _call: SetCreatorLogicCall;

  constructor(call: SetCreatorLogicCall) {
    this._call = call;
  }
}

export class SetMinterLogicCall extends ethereum.Call {
  get inputs(): SetMinterLogicCall__Inputs {
    return new SetMinterLogicCall__Inputs(this);
  }

  get outputs(): SetMinterLogicCall__Outputs {
    return new SetMinterLogicCall__Outputs(this);
  }
}

export class SetMinterLogicCall__Inputs {
  _call: SetMinterLogicCall;

  constructor(call: SetMinterLogicCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetMinterLogicCall__Outputs {
  _call: SetMinterLogicCall;

  constructor(call: SetMinterLogicCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
