// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FactoryInitialized extends ethereum.Event {
  get params(): FactoryInitialized__Params {
    return new FactoryInitialized__Params(this);
  }
}

export class FactoryInitialized__Params {
  _event: FactoryInitialized;

  constructor(event: FactoryInitialized) {
    this._event = event;
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetupNewContract extends ethereum.Event {
  get params(): SetupNewContract__Params {
    return new SetupNewContract__Params(this);
  }
}

export class SetupNewContract__Params {
  _event: SetupNewContract;

  constructor(event: SetupNewContract) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }

  get defaultAdmin(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get managers(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get transportConfig(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ChannelFactory extends ethereum.SmartContract {
  static bind(address: Address): ChannelFactory {
    return new ChannelFactory("ChannelFactory", address);
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractName(): string {
    let result = super.call("contractName", "contractName():(string)", []);

    return result[0].toString();
  }

  try_contractName(): ethereum.CallResult<string> {
    let result = super.tryCall("contractName", "contractName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractVersion(): string {
    let result = super.call(
      "contractVersion",
      "contractVersion():(string)",
      [],
    );

    return result[0].toString();
  }

  try_contractVersion(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "contractVersion",
      "contractVersion():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createInfiniteChannel(
    uri: string,
    defaultAdmin: Address,
    managers: Array<Address>,
    setupActions: Array<Bytes>,
    transportConfig: Bytes,
  ): Address {
    let result = super.call(
      "createInfiniteChannel",
      "createInfiniteChannel(string,address,address[],bytes[],bytes):(address)",
      [
        ethereum.Value.fromString(uri),
        ethereum.Value.fromAddress(defaultAdmin),
        ethereum.Value.fromAddressArray(managers),
        ethereum.Value.fromBytesArray(setupActions),
        ethereum.Value.fromBytes(transportConfig),
      ],
    );

    return result[0].toAddress();
  }

  try_createInfiniteChannel(
    uri: string,
    defaultAdmin: Address,
    managers: Array<Address>,
    setupActions: Array<Bytes>,
    transportConfig: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createInfiniteChannel",
      "createInfiniteChannel(string,address,address[],bytes[],bytes):(address)",
      [
        ethereum.Value.fromString(uri),
        ethereum.Value.fromAddress(defaultAdmin),
        ethereum.Value.fromAddressArray(managers),
        ethereum.Value.fromBytesArray(setupActions),
        ethereum.Value.fromBytes(transportConfig),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  finiteChannelImpl(): Address {
    let result = super.call(
      "finiteChannelImpl",
      "finiteChannelImpl():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_finiteChannelImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "finiteChannelImpl",
      "finiteChannelImpl():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  infiniteChannelImpl(): Address {
    let result = super.call(
      "infiniteChannelImpl",
      "infiniteChannelImpl():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_infiniteChannelImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "infiniteChannelImpl",
      "infiniteChannelImpl():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _infiniteChannelImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _finiteChannelImpl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateFiniteChannelCall extends ethereum.Call {
  get inputs(): CreateFiniteChannelCall__Inputs {
    return new CreateFiniteChannelCall__Inputs(this);
  }

  get outputs(): CreateFiniteChannelCall__Outputs {
    return new CreateFiniteChannelCall__Outputs(this);
  }
}

export class CreateFiniteChannelCall__Inputs {
  _call: CreateFiniteChannelCall;

  constructor(call: CreateFiniteChannelCall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get defaultAdmin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get managers(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get setupActions(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get transportConfig(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CreateFiniteChannelCall__Outputs {
  _call: CreateFiniteChannelCall;

  constructor(call: CreateFiniteChannelCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateInfiniteChannelCall extends ethereum.Call {
  get inputs(): CreateInfiniteChannelCall__Inputs {
    return new CreateInfiniteChannelCall__Inputs(this);
  }

  get outputs(): CreateInfiniteChannelCall__Outputs {
    return new CreateInfiniteChannelCall__Outputs(this);
  }
}

export class CreateInfiniteChannelCall__Inputs {
  _call: CreateInfiniteChannelCall;

  constructor(call: CreateInfiniteChannelCall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get defaultAdmin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get managers(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get setupActions(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get transportConfig(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CreateInfiniteChannelCall__Outputs {
  _call: CreateInfiniteChannelCall;

  constructor(call: CreateInfiniteChannelCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _initOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
